#!/usr/bin/env python
from __future__ import print_function
import sys
import tarfile
import hashlib


"""hashtar.py: checksum tar contents without unpacking"""
__version__   = "1.1"
__author__    = "ed <hashtar@ocv.me>"
__credits__   = ["stackoverflow.com"]
__license__   = "MIT"
__copyright__ = 2018


try:
	from datetime import datetime, timezone

	UTC = timezone.utc
except:
	from datetime import datetime, timedelta, tzinfo

	TD_ZERO = timedelta(0)

	class _UTC(tzinfo):
		def utcoffset(self, dt):
			return TD_ZERO

		def tzname(self, dt):
			return "UTC"

		def dst(self, dt):
			return TD_ZERO
	
	UTC = _UTC()


def eprint(*args, **kwargs):
	kwargs['file'] = sys.stderr
	print(*args, **kwargs)


try:
	mode = sys.argv[1].lower()
except:
	mode = None

if mode not in ['s','i']:
	eprint()
	eprint('expects uncompressed tar on stdin')
	eprint('will produce sha1 checksums on stdout')
	eprint()
	eprint('usage: {0} <s|i>'.format(sys.argv[0]))
	eprint('  s: just hash and filename')
	eprint('  i: also size and last-modified')
	eprint()
	sys.exit(1)


if sys.version_info[0] > 2:
	stdin = sys.stdin.buffer
else:
	if sys.platform == 'win32':
		import os, msvcrt
		msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
	stdin = sys.stdin


# use default blocksize 20*512 = 10KiB since most tarfiles are that
tar = tarfile.open(mode='r|', fileobj=stdin)

for ti in tar:
	if not ti.isreg():
		continue
	
	tf = tar.extractfile(ti)
	rd_sz = 20480 if ti.size >= 40960 else 10240
	hasher = hashlib.sha1()
	for buf in iter(lambda: tf.read(rd_sz), b''):
		hasher.update(buf)
	cksum = hasher.hexdigest()
	
	if mode == 's':
		print('{}  {}'.format(
			cksum, ti.name))
	
	if mode == 'i':
		zd = datetime.fromtimestamp(ti.mtime, UTC)
		mtime = "%04d-%02d-%02d %02d:%02d:%02d" % (
			zd.year,
			zd.month,
			zd.day,
			zd.hour,
			zd.minute,
			zd.second,
		)
		print('{:6o} {} {:>12} {} {}'.format(
			ti.mode, mtime, ti.size, cksum, ti.name))

tar.close()
