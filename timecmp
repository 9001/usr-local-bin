#!/usr/bin/env python3
from __future__ import print_function, unicode_literals


"""timecmp: compare system time"""
__version__ = "2025-01-21"
__author__ = "ed <timecmp@ocv.me>"
__credits__ = ["stackoverflow.com"]
__license__ = "MIT"
__copyright__ = 2023


import os
import sys
import time
import calendar
import random
import struct
import ctypes
import itertools
from datetime import datetime

try:
    from queue import Queue
except:
    from Queue import Queue  # py2

try:
    import socket
    import threading
except:
    pass


## directly between pipes (pointless, but a good example):
# python3 timecmp wp 1 | python3 timecmp rp

## more exciting over an ssh pipe between machines (two equivalent alternatives):
# ssh 10.1.2.9 'python - wp 1' <timecmp | python3 timecmp rp cool-banner
# python3 timecmp rn ssh,10.1.2.9

## or, if ssh is not an option, use the native tcp transport:
# run a server on some box:  python2 timecmp wn 1
# and connect from another:  python3 timecmp rn 10.1.2.9

## or, if a firewall makes that impossible, invert it:
# listen on receiver:  socat tcp4-l:8463,reuseaddr - | ./timecmp rp
# connect from sender: ./timecmp wp 1 >/dev/tcp/10.1.2.34/8463

## or connect to several targets at once:
# ./timecmp  rn  10.1.2.3  10.1.2.4:8080  ntp,10.1.2.5  ssh,10.1.2.6  ssh,python3,ed@10.1.2.7  ssh,python2.7,id_rsa,root@10.1.2.8:573  icmp,3,10.1.2.9  icmp,3,w,10.1.2.10
# -- 10.1.2.3 is a box running "timecmp wn 1"
# -- 10.1.2.4 is a box running "timecmp wn 1 8080"
# -- 10.1.2.5 is an ntp server
# -- 10.1.2.6 accepts ssh connections as current-user and has "python3" installed
# -- 10.1.2.7 accepts ssh connections as user 'ed' and has the python-binary "python312"
# -- 10.1.2.8 accepts ssh connections on port 573 as root with ssh-key id_rsa and has the python-binary "python2.7"
# -- 10.1.2.9 accepts icmp timestamp queries (nice) so ask it every 3sec
# -- 10.1.2.10 accepts icmp timestamp queries but unfortunately it's running windows so it speaks in reverse

## notes:
# - to allow icmp-time on win10: firewall -> inbound rules -> new rule -> custom ->
#    all programs -> protocol:icmpv4, customize:specificType:timestampRequest

## supports python 2.6 :^)


PORT = 8463
PY2 = sys.version_info < (3,)
WIN = sys.platform in ["win32", "msys", "cygwin"]

mutex = threading.Lock()


try:
    _ = TimeoutError
except:
    TimeoutError = MemoryError

try:
    from datetime import datetime, timezone

    _ = datetime.fromtimestamp(0, timezone.utc)

    def humantime(unix):
        return datetime.fromtimestamp(unix, timezone.utc).strftime("\033[36m%Y\033[0m%m%d\033[36m%H%M\033[0m%S.%f")[:-4]

except:
    from datetime import datetime

    def humantime(unix):
        return datetime.utcfromtimestamp(unix).strftime("\033[36m%Y\033[0m%m%d\033[36m%H%M\033[0m%S.%f")[:-4]


if hasattr(random, "randbytes"):
    randbytes = random.randbytes
else:
    def randbytes(haha):
        return struct.pack(b"<I", int(random.random() * 0xffffff00))


def mprint(*a, **ka):
    with mutex:
        print(*a, **ka)


class ICMP(object):
    def __init__(self):
        self.ip_qie = {}  # ip:(queue,interval,endianness)
        self.ip_new = set()  # newly-added
        self.sck = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
        t = threading.Thread(target=self.run)
        t.daemon = True
        t.start()

    def add(self, ip, que, interval=11, little_endian=False):
        # windows has little-endian energy
        self.ip_qie[ip] = (que, float(interval), b"<I" if little_endian else b">I")
        self.ip_new.add(ip)

    def run(self):
        fourteen = "\x0e" if PY2 else 14  # icmp response-type byte

        # pending queries
        rid_ip_ts = {}  # rid:(ip,time-sent)
        ip_rid = {}  # ip:rid

        # scheduled queries
        ip_dl = {}  # ip:deadline

        last_chk = 0
        next_deadline = 0
        daystart = next_day = 0
        while True:
            now = time.time()
            if now >= next_day:
                try:
                    dt = datetime.fromtimestamp(now, timezone.utc)
                except:
                    dt = datetime.utcfromtimestamp(now)
                zy, zm, zd = list(dt.utctimetuple())[:3]
                daystart = calendar.timegm((zy, zm, zd, 0, 0, 0))
                next_day = daystart + 86400  # usually close enough

            if self.ip_new:
                ip = next(iter(self.ip_new))
                self.ip_new.remove(ip)
                ip_dl[ip] = next_deadline = 0

            if now >= next_deadline and now - last_chk > 0.01:
                last_chk = now
                for ip, deadline in ip_dl.items():
                    if deadline > now:
                        continue
                    if ip in ip_rid:
                        del rid_ip_ts[ip_rid[ip]]
                    rid = randbytes(4) + struct.pack(b">I", int((time.time() - daystart) * 1000))
                    csum = sum(struct.unpack(b">5H", b"\x0d\x00" + rid))
                    csum = (csum >> 16) + (csum & 0xffff)
                    buf = struct.pack(b">H", ~csum & 0xffff)
                    buf = b"\x0d\x00" + buf + rid + b"\x00\x00\x00\x00\x00\x00\x00\x00"
                    # print("sending req", repr(ip), len(buf), repr(buf))
                    self.sck.sendto(buf, (ip, 0))
                    now = time.time()
                    rid_ip_ts[rid] = (ip, now)
                    ip_rid[ip] = rid
                    ip_dl[ip] = next_deadline = now + self.ip_qie[ip][1]
                    break  # we modified the iterator source + we don't wanna flood the net
                for deadline in ip_dl.values():
                    if next_deadline > deadline:
                        next_deadline = deadline

            self.sck.settimeout(1 if next_deadline - now >= 1 else 0.01)
            try:
                buf, addr = self.sck.recvfrom(60)
            except socket.timeout:
                continue
            if len(buf) < 40 or buf[20] != fourteen:
                continue
            now = time.time()
            rid = buf[24:32]
            if rid not in rid_ip_ts:
                continue
            ip, sent = rid_ip_ts.pop(rid)
            que, _, endianness = self.ip_qie[ip]
            del ip_rid[ip]
            ts_cli = struct.unpack(endianness, buf[36:40])[0]
            ret = float(ts_cli) / 1000.0 + daystart + (now - sent) / 2
            td = now - ret
            abs_td = abs(td)
            if abs_td < 43200:
                que.put(ret)
            elif abs_td > 86400:
                que.put("windows detected")
            elif td < -43200:
                que.put(ret - 86400)
            elif td > 43200:
                que.put(ret + 86400)


if " icmp," in " ".join(sys.argv):
    icmp = ICMP()


class timespec(ctypes.Structure):
    _fields_ = [("tv_sec", ctypes.c_long), ("tv_nsec", ctypes.c_long)]


try:
    # all the magic is from /usr/include/linux/time.h
    librt = ctypes.CDLL("librt.so.1", use_errno=True)
    clock_gettime = librt.clock_gettime
    clock_gettime.argtypes = [ctypes.c_int, ctypes.POINTER(timespec)]

    def rt_gettime():
        t = timespec()
        # 4: CLOCK_MONOTONIC_RAW
        if clock_gettime(4, ctypes.pointer(t)) != 0:
            errno_ = ctypes.get_errno()
            raise OSError(errno_, os.strerror(errno_))

        return t.tv_sec + t.tv_nsec * 1e-9

    def get_uptime():
        with open("/proc/uptime", "r") as f:
            return float(f.read().split(" ")[0])

    print("using unix-uptime (good)")

except:

    if hasattr(time, "monotonic"):
        print("using time.monotonic (okay)")
        def rt_gettime():
            # can of worms: https://bugs.python.org/issue44328
            return time.monotonic()
    else:
        print("WARNING: pretending time.time is monotonic (use python3)")
        def rt_gettime():
            return time.time()

    get_uptime = rt_gettime


def gentimes():
    fmt = "%.2f %.4f %.4f | %.2f %.3f %.3f | um=%+.2f uw=%+.2f mw=%+.4f"
    # first 3 fields: [U]ptime, [M]onotonic, [W]allclock
    #  next 3 fields: total runtime according to u,m,w  (should be identical)
    #  next 3 fields: total drift between u/m, u/w, m/w

    ival = float(sys.argv[2]) if len(sys.argv) > 2 else 60
    m0 = rt_gettime()
    u0 = get_uptime()
    w0 = time.time()
    while True:
        m = rt_gettime()
        u = get_uptime()
        w = time.time()
        tm = m - m0
        tu = u - u0
        tw = w - w0
        yield fmt % (u, m, w, tu, tm, tw, tu - tm, tu - tw, tm - tw)

        # sleep until monotonic % interval ~= 0
        tgt = (int(m / ival) + 1) * ival
        time.sleep(tgt - m)


def writepipe():
    if PY2:
        for t in gentimes():
            print("%s\n" % (t,), end="")
            sys.stdout.flush()
    else:
        for t in gentimes():
            print("%s\n" % (t,), end="", flush=True)


def writenet():
    ival = float(sys.argv[2]) if len(sys.argv) > 2 else 60
    port = int(sys.argv[3]) if len(sys.argv) > 3 else PORT
    srv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    if not WIN:
        srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    srv.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    srv.settimeout(ival * 2.5)
    srv.bind(("0.0.0.0", port))
    srv.listen(4)
    print("listening on port", port)
    while True:
        try:
            cli, addr = srv.accept()
            print("cli", addr)
            t = threading.Thread(target=writenetc, args=(cli, addr))
            t.daemon = True
            t.start()
        except TimeoutError:
            pass
        except Exception as ex:
            if str(ex) == "timed out":
                continue  # py27
            print("ex:", ex)


def writenetc(cli, addr):
    for t in gentimes():
        try:
            cli.sendall(t.encode("utf-8") + b"\n")
        except:
            print("bye", addr)
            cli.close()
            return


if PY2:

    def readpipe():
        while True:
            ln = sys.stdin.readline()
            if not ln:
                break
            yield ln

else:

    def readpipe():
        for ln in sys.stdin:
            yield ln


def readnet(target):
    use_ntp = target.startswith("ntp,")
    use_ssh = target.startswith("ssh,")
    use_icmp = target.startswith("icmp,")
    if use_ntp:
        default_port = 123
    elif use_ssh:
        default_port = 0
    else:
        default_port = PORT

    argv = target.split(",")
    if len(argv) > 1:
        argv.pop(0)

    try:
        ip, port = argv[-1].split(":")
    except:
        ip = argv[-1]
        port = default_port
    port = int(port)

    if use_ntp:
        fun = readnet_ntp
    elif use_ssh:
        fun = readnet_ssh
    elif use_icmp:
        fun = readnet_icmp
    else:
        fun = readnet_plain

    try:
        for v in fun(ip, port, argv[:-1]):
            yield v
    except Exception as ex:
        yield "! %s (%r)" % (ex,ex)


def readnet_icmp(ip, port, argv):
    q = Queue()
    icmp.add(ip, q, *argv)
    try:
        while True:
            v = q.get()
            yield "%f %f %f" % (v,v,v)
    except:
        yield "! %s" % (v,)


def readnet_ntp(ip, port, argv):
    try:
        slp = float(argv[0])
    except:
        slp = 64

    while True:
        try:
            sck = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sck.settimeout(3)
            sck.sendto(b"\x1b" + 47 * b"\0", (ip, port))
            msg, addr = sck.recvfrom(256)
            rsp = struct.unpack(b"!12I", msg[:12*4])
            utc = rsp[10] + float(rsp[11]) / 2**32 - 2208988800
            yield "%f %f %f" % (utc,utc,utc)
        except Exception as ex:
            yield "! %s (%r)" % (ex,ex)
        finally:
            sck.close()
        time.sleep(slp)


def readnet_ssh(ip, port, argv):
    import subprocess as sp

    local_cmd = ["ssh"]
    if port:
        local_cmd += ["-p", "%s" % (port,)]

    if argv:
        target_cmd = argv.pop(0)
    else:
        target_cmd = "python3"

    if argv:
        local_cmd += ["-i", argv.pop(0)]

    cmd = local_cmd + [ip, target_cmd + " -u - wp 1"]
    yield ("! %r" % (cmd,))

    p = sp.Popen(cmd, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
    with open(__file__, "rb") as f:
        p.stdin.write(f.read())
    p.stdin.close()

    q = Queue()
    def reader(src):
        while True:
            ln = src.readline()
            if not ln:
                q.put(None)
                break
            q.put(ln.rstrip().decode("ascii", "replace"))

    for src in [p.stdout, p.stderr]:
        thr = threading.Thread(target=reader, args=[src])
        thr.daemon = True
        thr.start()

    eofs = 0
    while True:
        ln = q.get()
        if ln is None:
            eofs += 1
            if eofs > 1:
                time.sleep(3)
                yield "! EOF"
                return
            continue
        yield ln


def readnet_plain(ip, port, argv):
    sck = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sck.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    sck.connect((ip, port))
    buf = b""
    while True:
        b = sck.recv(1024)
        if not b:
            yield "EOF"
            return
        buf += b
        if b"\n" not in buf:
            continue
        lns = buf.split(b"\n")
        for ln in lns[:-1]:
            yield ln.decode("utf-8")
        buf = lns[-1]


def fcmp(src, sync, y=0, ip=""):
    try:
        fmt = "\033[s\033[2r\033[H\033[0;1;37;44m%s\033[K\033[u\033[A\n" % (sys.argv[2],)
    except:
        fmt = ""

    if y:
        fmt = "\033[%dH" % (y,)

    fmt0 = fmt
    fmt += "%s\033[36m%8s\033[0m %+.2f %+.4f %+.4f \033[36m%% %+.2f %+.3f %+.3f \033[0mu %.2f %.2f \033[36mm %.4f %.4f \033[0mw %.4f %.4f \033[K"
    # u = uptime
    # m = monotonic
    # w = wallclock
    # first 3 cols = total drift between remote/local u,m,w
    # next 3 cols = total drift % between remote/local u,m,w
    # remaining fields = pairs of total (local,remote) u,m,w

    if y:
        fmt += "  " + ip + "\033[99H %s\033[A"
    else:
        fmt += "%s"

    if sync:
        # skip burst of initial items from pipe
        prev = rt_gettime()
        while True:
            txt = next(src)
            now = rt_gettime()
            if now - prev > 0.03:
                break
            prev = now
            print(".", end="")
        print()
    else:
        # network/tcp; just go
        txt = next(src)

    while True:
        try:
            ru0, rm0, rw0 = [float(x) for x in txt.split(" ")[:3]]
            break
        except:
            print("%ssync:%s @%s\033[K" % (fmt0, txt, ip))
            try:
                txt = next(src)
            except:
                return

    n = 0
    lm0 = rt_gettime()
    lu0 = get_uptime()
    lw0 = time.time()
    print("%s\033[90m#-   L %.4f %.4f %.4f   R %.4f %.4f %.4f \033[0m" % (fmt0, lu0, lm0, lw0, ru0, rm0, rw0))
    for txt in itertools.chain([txt], src):
        try:
            ru, rm, rw = [float(x) for x in txt.split(" ")[:3]]
        except:
            print("%smain:%s @%s\033[K" % (fmt0, txt, ip))
            continue

        lm = rt_gettime()
        lu = get_uptime()
        lw = time.time()
        tlu = lu - lu0
        tlm = lm - lm0
        tlw = lw - lw0
        tru = ru - ru0
        trm = rm - rm0
        trw = rw - rw0
        tdu = tlu - tru
        tdm = tlm - trm
        tdw = tlw - trw

        r8601 = humantime(rw)[:-3]

        walldiff = lw - rw
        abs_wd = abs(walldiff)
        if abs_wd < 100:
            wds = "%+.4f" % (walldiff,)
        elif abs_wd < 1000:
            wds = "%+.3f" % (walldiff,)
        elif abs_wd/60 < 100:
            wds = "%+.3fM" % (walldiff/60,)
        elif abs_wd/3600 < 100:
            wds = "%+.3fH" % (walldiff/3600,)
        else:
            wds = "%+.0fH" % (walldiff/3600,)

        n += 1
        if n % 30 == 1 and not y:
            print("%s\033[90m#%d   L %.4f %.4f %.4f   R %.4f %.4f %.4f \033[0m" % (fmt0, n, lu, lm, lw, ru, rm, rw))

        suf = humantime(time.time()) if y else ""

        mprint(fmt % (
            r8601, wds,

            tdu, tdm, tdw,

            100*(0 if tdu == tlu else tdu/(tlu or 0.01)),
            100*(0 if tdm == tlm else tdm/(tlm or 0.01)),
            100*(0 if tdw == tlw else tdw/(tlw or 0.01)),

            tlu, tru,
            tlm, trm,
            tlw, trw,

            suf
        ))


def multiread(n, ip):
    fcmp(readnet(ip), False, n + 1, ip)


def main():
    if WIN:
        os.system("rem")

    cmd = sys.argv[1] if len(sys.argv) > 1 else ""
    if cmd == "wp":
        return writepipe()
    elif cmd == "wn":
        return writenet()
    elif cmd == "rp":
        return fcmp(readpipe(), True)
    elif cmd == "rn":
        targets = sys.argv[2:]
        if len(targets) == 1:
            return fcmp(readnet(targets[0]), False)
        else:
            print("\033[H\033[J", end="")
            thrs = []
            for n, ip in enumerate(targets):
                t = threading.Thread(target=multiread, args=(n,ip))
                t.daemon = True
                t.start()
                thrs.append(t)
            while True:
                time.sleep(0.1)
                if not next((x for x in thrs if x.is_alive()), None):
                    break
    else:
        print("need arg 1: wp | wn | rp | rn")
        print()
        print("wp (writepipe) args: [interval]")
        print("wn (writenet) args: [interval [port]]")
        print("rp (readpipe) args: [banner]")
        print("rn (readnet) args: ip[:port]")
        print("rn (readnet) args: ip[:port] [ip:port [ip:port [...]]]")
        print()
        print("rn ntp,pool.ntp.org     # a good box on the internets")
        print("rn ntp,3,kurisu.local   # every 3 sec from a lan node")
        print("rn icmp,192.168.2.3     # icmp; inaccurate, root-only")
        print("rn icmp,1,w,10.1.2.3    # each sec from a windows box")
        print()
        print("ssh 10.1.2.9 'python - wp 1' <timecmp | timecmp rp")
        print()
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass

